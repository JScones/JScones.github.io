{"version":3,"sources":["components/Card/Card.tsx","components/Board/Todo.tsx","components/Board/TodoCard.tsx","components/Board/Board.tsx","mocks/boardsMock.ts","mocks/assignmentsMock.ts","components/Assignment/Assignments.tsx","components/Gym/Gym.tsx","mocks/gymMock.ts","components/Quote/Quote.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Card","props","className","title","children","CardContainer","Todo","TodoCard","items","length","map","item","key","slice","push","Board","cards","card","cardId","boardMock","assignmentsMock","AssignmentsContainer","AssignmentCard","assignment","date","due","fromNow","Cell","GymCheck","GymCross","GymDoneMarker","done","Gym","days","attendance","GymMock","Quote","useState","quote","setQuote","useEffect","console","log","process","App","board","boardId","sort","a","b","localeCompare","assignmentId","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3ed3093b.chunk.js","sourcesContent":["import React from \"react\";\n\nimport './Card.css';\n\ninterface CardProps {\n    title: string\n}\n\nexport const Card: React.FC<CardProps> = (props) => {\n\n\n    return (\n        <div className={\"card\"}>\n            <h3>{props.title}</h3>\n            {props.children}\n        </div>\n    )\n};\n\nexport const CardContainer = (props: any) => (\n    <div className={\"card-container\"} {...props}>\n    </div>\n);\n","import React from 'react';\n\nimport './Todo.css';\n\nexport const Todo: React.FC = (props) => {\n    return (\n        <div className={\"todo\"}>\n            {props.children}\n        </div>\n    )\n};\n","import React, {ReactNode} from 'react';\nimport {Card} from \"../Card/Card\";\nimport {Todo} from \"./Todo\";\n\ninterface TodoCardProps {\n    title: string,\n    items: string[]\n}\n\nexport const TodoCard: React.FC<TodoCardProps> = (props) => {\n\n    let items:ReactNode[] = [];\n    const getItems = () => {\n        if (props.items.length < 5) items = props.items.map(item => <Todo key={item}>{item}</Todo>);\n        else if (props.items.length >=5 ) {\n            items = props.items.slice(0, 3).map(item => <Todo key={item}>{item}</Todo>);\n            items.push(<Todo key={\"last one\"}>{ `+ ${props.items.length - 3} more items...`}</Todo>)\n        }\n        return items;\n    };\n\n    return (\n        <Card title={props.title}>\n            { getItems() }\n        </Card>\n    )\n};\n","import React from 'react';\nimport {CardContainer} from \"../Card/Card\";\nimport {CardModel} from \"../../models/BoardModels\";\nimport {TodoCard} from \"./TodoCard\";\n\ninterface BoardProps {\n    title: string,\n    cards: CardModel[]\n}\n\nexport const Board: React.FC<BoardProps> = (props) => {\n    return (\n        <>\n            <h2>{props.title}</h2>\n            <CardContainer>\n                { props.cards.map(card => {\n                    if (card.items.length > 0) return <TodoCard key={card.cardId} title={card.title} items={card.items}/>\n                })}\n            </CardContainer>\n        </>\n    )\n};\n","import {BoardModel} from \"../models/BoardModels\";\n\nexport const boardMock: BoardModel[] = [\n    {\n        \"boardId\": 0,\n        \"title\": \"To Do\",\n        \"cards\": [\n            {\n                \"cardId\": 0,\n                \"title\": \"COSC401\",\n                \"items\": [\n                    \"Assignment 2\"\n                ]\n            },\n            {\n                \"cardId\": 1,\n                \"title\": \"COSC422\",\n                \"items\": [\n                    \"Assignment 2\",\n                    \"Labs\"\n                ]\n            },\n            {\n                \"cardId\": 2,\n                \"title\": \"COSC424\",\n                \"items\": [\n                    \"Write up lab 6\",\n                    \"Write up lab 7\",\n                    \"Write up lab 8\",\n                    \"Write up lab 9\",\n                    \"Assignment 2\"\n                ]\n            },\n            {\n                \"cardId\": 3,\n                \"title\": \"SENG402\",\n                \"items\": [\n\n                ]\n            }\n        ]\n    },\n    {\n        \"boardId\": 1,\n        \"title\": \"Doing\",\n        \"cards\": [\n            {\n                \"cardId\": 0,\n                \"title\": \"COSC401\",\n                \"items\": []\n            },\n            {\n                \"cardId\": 1,\n                \"title\": \"COSC422\",\n                \"items\": []\n            },\n            {\n                \"cardId\": 2,\n                \"title\": \"COSC424\",\n                \"items\": []\n            },\n            {\n                \"cardId\": 3,\n                \"title\": \"SENG402\",\n                \"items\": [\n                    \"Final Report\",\n                    \"Poster\"\n                ]\n            }\n        ]\n    }\n];\n","import {AssingmentModel} from \"../models/AssingmentModels\";\n\nexport const assignmentsMock: AssingmentModel[] = [\n    {\n        \"assignmentId\": 0,\n        \"title\": \"COSC422 Assignment 2\",\n        \"due\": \"2019-10-18T10:55:00.000Z\"\n    },\n    {\n        \"assignmentId\": 1,\n        \"title\": \"COSC424 Assignment 2\",\n        \"due\": \"2019-10-18T10:55:00.000Z\"\n    },\n    {\n        \"assignmentId\": 3,\n        \"title\": \"COSC401 Assignment 2\",\n        \"due\": \"2019-10-18T10:55:00.000Z\"\n    },\n    {\n        \"assignmentId\": 4,\n        \"title\": \"SENG402 Final Report\",\n        \"due\": \"2019-10-06T05:55:00.000Z\"\n    }\n];","import React from \"react\";\nimport './Assignments.css';\nimport {AssingmentModel} from \"../../models/AssingmentModels\";\nimport Moment from \"react-moment\";\n\nexport const AssignmentsContainer: React.FC = (props) => {\n    return (\n        <div className={\"assignments-container\"}>\n            { props.children }\n        </div>\n    )\n};\n\ninterface AssignmentCardProps {\n    assignment: AssingmentModel\n}\n\nexport const AssignmentCard:  React.FC<AssignmentCardProps> = (props) => {\n    return (\n        <div className={\"assignment\"}>\n            <p>{props.assignment.title}</p>\n            <h4><Moment date={props.assignment.due} fromNow/></h4>\n        </div>\n    )\n};","import React from \"react\";\nimport Check from \"@material-ui/icons/Check\";\nimport Clear from \"@material-ui/icons/Clear\";\n\n\nimport './Gym.css';\nimport {MonthGymMock} from \"../../mocks/gymMock\";\n\ninterface GymProps {\n    days: number[],\n    attendance: number\n}\n\nconst Cell: React.FC = (props) => {\n    return (\n        <div className={\"gym-cell\"}>\n            { props.children }\n        </div>\n    )\n};\n\nconst GymCheck = () => {\n    return (\n        <p className={\"gym-tick\"}>\n            <Check/>\n        </p>\n    )\n};\n\nconst GymCross = () => {\n    return (\n        <p className={\"gym-cross\"}>\n            <Clear/>\n        </p>\n    )\n};\n\nconst GymDoneMarker: React.FC<{done: number}> = (props) => {\n    if (props.done === 0) return <GymCross/>;\n    if (props.done === 1) return <GymCheck/>;\n    else return null;\n};\n\nexport const Gym: React.FC<GymProps> = (props) => {\n\n    return (\n        <div className={\"gym\"}>\n            <div className={\"gym-cells\"}>\n                <Cell>\n                    <p>Mon</p>\n                    <GymDoneMarker done={props.days[0]}/>\n                </Cell>\n                <Cell>\n                    <p>Tue</p>\n                    <GymDoneMarker done={props.days[1]}/>\n                </Cell>\n                <Cell>\n                    <p>Wed</p>\n                    <GymDoneMarker done={props.days[2]}/>\n                </Cell>\n                <Cell>\n                    <p>Thu</p>\n                    <GymDoneMarker done={props.days[3]}/>\n                </Cell>\n                <Cell>\n                    <p>Fri</p>\n                    <GymDoneMarker done={props.days[4]}/>\n                </Cell>\n                <Cell>\n                    <p>Sat</p>\n                    <GymDoneMarker done={props.days[5]}/>\n                </Cell>\n                <Cell>\n                    <p>Sun</p>\n                    <GymDoneMarker done={props.days[6]}/>\n                </Cell>\n            </div>\n            <p>{props.attendance}% this month.</p>\n        </div>\n    )\n};","\n\nexport const GymMock: number[] = [1,0,-1,-1,-1,-1,-1];\n\nexport const MonthGymMock: number = 50;","import React, {useEffect, useState} from \"react\";\nimport './Quote.css';\n\nexport const Quote: React.FC = () => {\n    const [quote, setQuote] = useState<string>(\"Loading...\");\n\n    useEffect(() => {\n        console.log(process.env.NODE_ENV);\n        if (process.env.NODE_ENV === \"production\") {\n            setQuote(\"Prod\");\n        } else {\n            console.log(\"in here\");\n            setQuote(\"I'm in dev so I didn't fetch a quote.\");\n        }\n    }, []);\n\n    return (\n        <div className={\"quote\"}>\n            <blockquote>{ quote }</blockquote>\n        </div>\n    )\n};","import React from 'react';\nimport './App.css';\nimport {Board} from \"./components/Board/Board\";\nimport {boardMock} from './mocks/boardsMock';\nimport {assignmentsMock} from \"./mocks/assignmentsMock\";\nimport {AssignmentCard, AssignmentsContainer} from \"./components/Assignment/Assignments\";\nimport {Gym} from \"./components/Gym/Gym\";\nimport {GymMock, MonthGymMock} from \"./mocks/gymMock\";\nimport {Quote} from \"./components/Quote/Quote\";\n\nconst App: React.FC = () => {\n\n    return (\n        <div className=\"App\">\n            {boardMock.map(board => {\n                if (board.cards.length > 0) return <Board key={board.boardId} title={board.title} cards={board.cards}/>\n            })}\n            <hr/>\n            <div>\n                <h2>Assignments</h2>\n                <AssignmentsContainer>\n                    {assignmentsMock.sort((a, b) => a.due.localeCompare(b.due)).map(assignment => <AssignmentCard\n                        key={assignment.assignmentId} assignment={assignment}/>)}\n                </AssignmentsContainer>\n            </div>\n            <hr/>\n            <div>\n                <h2>Gym</h2>\n                <Gym days={GymMock} attendance={MonthGymMock}/>\n            </div>\n            <hr/>\n            {/*<div>*/}\n            {/*    <h2>Weather</h2>*/}\n            {/*</div>*/}\n            {/*<hr/>*/}\n            <Quote/>\n        </div>\n    );\n\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}