{"version":3,"sources":["models/GymModels.ts","components/milestone/Milestone.tsx","components/card/Card.tsx","components/board/Todo.tsx","components/board/TodoCard.tsx","components/board/Board.tsx","mocks/gymMock.ts","services/constants.ts","services/ApiServices.ts","services/GymServices.ts","components/gym/Gym.tsx","components/quote/Quote.tsx","mocks/countdownsMock.ts","services/CountdownServices.ts","mocks/milestonesMock.ts","services/MilestoneServices.ts","mocks/boardsMock.ts","services/BoardServices.ts","components/countdown/Countdown.tsx","components/countdown/Countdowns.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["GymState","MilestonesContainer","props","className","children","Milestone","milestone","title","date","due","fromNow","Card","CardContainer","Todo","TodoCard","items","length","map","item","slice","push","Board","cards","card","cardId","Mode","gymMock","gymWeekDays","id","state","done","skip","rest","future","gymPercent","gymMock2","ApiEndpoint","ApiMethod","environment","prod","ApiUrl","ApiServices","postJson","url","body","requestInit","method","POST","headers","JSON","stringify","fetch","then","res","json","GymServices","getGymWeekDays","dev","Promise","resolve","GYM","GET","updateGymWeekDays","GYM_WEEK","getNextGymState","Cell","onClick","GymCheck","Check","GymSkip","Clear","GymRest","Remove","GymDoneMarker","handleClick","weekDay","updateDays","gymServices","days","Gym","day","index","bind","attendance","Quote","useState","quote","setQuote","useEffect","countdownsMock","countdownId","CountdownServices","getCountdowns","COUNTDOWNS","milestonesMock","milestoneId","MilestoneServices","getMilestones","MILESTONES","boardMock","boardId","BoardServices","getBoards","BOARDS","Countdown","countdownDays","useMemo","eventDate","moment","diff","countdownWeeks","countdownMonths","showDays","showWeeks","repeat","today","Date","toISOString","Countdowns","countdowns","filter","a","localeCompare","sort","b","countdown","addBoard","alert","App","milestones","setMilestones","boards","setBoards","gym","setGym","setCountdowns","debouncedGymUpdate","useRef","debounce","gymModel","current","cancel","data-theme","board","Add","updatedWeekDays","updateGymDay","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.90de91ce.chunk.js","sourcesContent":["export enum GymState {\n\tfuture,\n\tdone,\n\tskip,\n\trest\n}\n\nexport type GymWeekDayModel = {\n\tid: number;\n\tstate: GymState;\n};\n\nexport interface GymModel {\n\tgymWeekDays: GymWeekDayModel[];\n\tgymPercent: number;\n}\n","import React from 'react';\nimport Moment from 'react-moment';\nimport { MilestoneModel } from '../../models/MilestoneModels';\nimport './Milestone.css';\n\nexport const MilestonesContainer: React.FC = (props) => {\n\treturn <div className={'milestones-container'}>{props.children}</div>;\n};\n\ninterface MilestoneProps {\n\tmilestone: MilestoneModel;\n}\n\nexport const Milestone: React.FC<MilestoneProps> = (props) => {\n\treturn (\n\t\t<div className={'milestone'}>\n\t\t\t<p>{props.milestone.title}</p>\n\t\t\t<h4>\n\t\t\t\t<Moment date={props.milestone.due} fromNow />\n\t\t\t</h4>\n\t\t</div>\n\t);\n};\n","import React from 'react';\n\nimport './Card.css';\n\ninterface CardProps {\n\ttitle: string;\n}\n\nexport const Card: React.FC<CardProps> = (props) => {\n\treturn (\n\t\t<div className={'card'}>\n\t\t\t<h3>{props.title}</h3>\n\t\t\t{props.children}\n\t\t</div>\n\t);\n};\n\nexport const CardContainer = (props: any) => (\n\t<div className={'card-container'} {...props}></div>\n);\n","import React from 'react';\n\nimport './Todo.css';\n\nexport const Todo: React.FC = (props) => {\n\treturn <div className={'todo'}>{props.children}</div>;\n};\n","import React, { ReactNode } from 'react';\nimport { Card } from '../card/Card';\nimport { Todo } from './Todo';\n\ninterface TodoCardProps {\n\ttitle: string;\n\titems: string[];\n}\n\nexport const TodoCard: React.FC<TodoCardProps> = (props) => {\n\tlet items: ReactNode[] = [];\n\tconst getItems = () => {\n\t\tif (props.items.length < 5)\n\t\t\titems = props.items.map((item) => <Todo key={item}>{item}</Todo>);\n\t\telse if (props.items.length >= 5) {\n\t\t\titems = props.items\n\t\t\t\t.slice(0, 3)\n\t\t\t\t.map((item) => <Todo key={item}>{item}</Todo>);\n\t\t\titems.push(\n\t\t\t\t<Todo key={'last one'}>{`+ ${\n\t\t\t\t\tprops.items.length - 3\n\t\t\t\t} more items...`}</Todo>,\n\t\t\t);\n\t\t}\n\t\treturn items;\n\t};\n\n\treturn <Card title={props.title}>{getItems()}</Card>;\n};\n","import React from 'react';\nimport { CardModel } from '../../models/BoardModels';\nimport { CardContainer } from '../card/Card';\nimport { TodoCard } from './TodoCard';\n\ninterface BoardProps {\n\ttitle: string;\n\tcards: CardModel[];\n}\n\nexport const Board: React.FC<BoardProps> = (props) => {\n\treturn (\n\t\t<>\n\t\t\t<h2>{props.title}</h2>\n\t\t\t<CardContainer>\n\t\t\t\t{props.cards.map((card) => {\n\t\t\t\t\tif (card.items && card.items.length > 0)\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<TodoCard\n\t\t\t\t\t\t\t\tkey={card.cardId}\n\t\t\t\t\t\t\t\ttitle={card.title}\n\t\t\t\t\t\t\t\titems={card.items}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t);\n\t\t\t\t\treturn null;\n\t\t\t\t})}\n\t\t\t</CardContainer>\n\t\t</>\n\t);\n};\n","import { GymModel, GymState, GymWeekDayModel } from '../models/GymModels';\n\nexport const gymWeekMock: GymWeekDayModel[] = [\n\t{ id: 0, state: GymState.done },\n\t{ id: 1, state: GymState.skip },\n\t{ id: 2, state: GymState.done },\n\t{ id: 3, state: GymState.rest },\n\t{ id: 4, state: GymState.future },\n\t{ id: 5, state: GymState.future },\n\t{ id: 6, state: GymState.future },\n];\n\nexport const monthGymMock: number = 50;\n\nexport const gymMock: GymModel = {\n\tgymWeekDays: gymWeekMock,\n\tgymPercent: monthGymMock\n}\n\nexport const gymMock2: GymModel = {\n\tgymWeekDays: [\n\t\t{ id: 0, state: GymState.done },\n\t\t{ id: 1, state: GymState.skip },\n\t\t{ id: 2, state: GymState.done },\n\t\t{ id: 3, state: GymState.rest },\n\t\t{ id: 4, state: GymState.done },\n\t\t{ id: 5, state: GymState.future },\n\t\t{ id: 6, state: GymState.future },\n\t],\n\tgymPercent: 65\n}\n\n","const server = 'dashboard-8d69a/us-central1';\n\nexport enum Mode {\n\tdev,\n\tprod,\n}\n\nexport const environment: Mode = process.env.NODE_ENV === 'production' ? Mode.prod : Mode.dev;\n\nexport const ApiUrl =\n\tenvironment === Mode.prod\n\t\t? 'https://us-central1-dashboard-8d69a.cloudfunctions.net'\n\t\t: `/${server}`;\n\nexport enum ApiEndpoint {\n\tCOUNTDOWNS = '/countdowns',\n\tMILESTONES = '/milestones',\n\tBOARDS = '/boards',\n\tGYM = '/gym',\n\tGYM_WEEK = '/gym/week',\n}\n\nexport enum ApiMethod {\n\tGET = 'GET',\n\tPOST = 'POST',\n\tPUT = 'PUT',\n\tPATCH = 'PATCH',\n\tDELETE = 'DELETE',\n}\n\n","import { ApiMethod } from './constants';\n\nconst ApiServices = {\n\tpostJson<T>(url: string, body: any): Promise<T> {\n\t\tconst requestInit: RequestInit = {\n\t\t\tmethod: ApiMethod.POST,\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t},\n\t\t\tbody: JSON.stringify(body)\n\t\t};\n\t\treturn fetch(url, requestInit).then((res) => res.json());\n\t}\n}\n\nexport default ApiServices;","import { gymMock, gymMock2 } from '../mocks/gymMock';\nimport { GymModel, GymState, GymWeekDayModel } from '../models/GymModels';\nimport { ApiEndpoint, ApiMethod, ApiUrl, environment, Mode } from './constants';\nimport ApiServices from './ApiServices';\n\nconst GymServices = {\n\tgetGymWeekDays(): Promise<GymModel> {\n\t\tif (environment === Mode.dev) {\n\t\t\treturn Promise.resolve(gymMock);\n\t\t}\n\t\tconst url = `${ApiUrl}${ApiEndpoint.GYM}`;\n\t\tconst requestInit: RequestInit = {\n\t\t\tmethod: ApiMethod.GET,\n\t\t};\n\t\treturn fetch(url, requestInit).then((res) => res.json()).then(res => {\n\t\t\treturn {\n\t\t\t\tgymWeekDays: res,\n\t\t\t\tgymPercent: 50\n\t\t\t}\n\t\t});\n\t},\n\tupdateGymWeekDays(gymWeekDays: GymWeekDayModel[]): Promise<GymModel> {\n\t\tif (environment === Mode.dev) {\n\t\t\treturn Promise.resolve(gymMock2);\n\t\t}\n\t\tconst url = `${ApiUrl}${ApiEndpoint.GYM_WEEK}`;\n\t\treturn ApiServices.postJson<GymWeekDayModel[]>(url, gymWeekDays).then(res => {\n\t\t\treturn {\n\t\t\t\tgymWeekDays: res,\n\t\t\t\tgymPercent: 50\n\t\t\t}\n\t\t})\n\t},\n\tgetNextGymState(state: GymState) {\n\t\tswitch (state) {\n\t\t\tcase GymState.done:\n\t\t\t\treturn GymState.skip;\n\t\t\tcase GymState.skip:\n\t\t\t\treturn GymState.rest;\n\t\t\tcase GymState.rest:\n\t\t\t\treturn GymState.future;\n\t\t\tcase GymState.future:\n\t\t\t\treturn GymState.done;\n\t\t}\n\t}\n};\n\nexport default GymServices;\n","import { Check, Clear, Remove } from '@material-ui/icons';\nimport React from 'react';\nimport './Gym.css';\nimport { GymState, GymWeekDayModel } from '../../models/GymModels';\nimport gymServices from '../../services/GymServices';\n\ninterface GymProps {\n\tdays: GymWeekDayModel[];\n\tattendance: number;\n\tupdateDays: (day: GymWeekDayModel) => void;\n}\n\nconst Cell: React.FC<{ onClick?: React.MouseEventHandler }> = (props) => {\n\treturn <div className={'gym-cell'} onClick={props.onClick}>{props.children}</div>;\n};\n\nconst GymCheck = () => {\n\treturn (\n\t\t<p className={'gym-tick'}>\n\t\t\t<Check />\n\t\t</p>\n\t);\n};\n\nconst GymSkip = () => {\n\treturn (\n\t\t<p className={'gym-cross'}>\n\t\t\t<Clear />\n\t\t</p>\n\t);\n};\n\nconst GymRest = () => {\n\treturn (\n\t\t<p className={'gym-skip'}>\n\t\t\t<Remove />\n\t\t</p>\n\t);\n};\n\nconst GymDoneMarker: React.FC<{ done: GymState }> = (props) => {\n\tswitch (props.done) {\n\t\tcase GymState.done:\n\t\t\treturn <GymCheck />;\n\t\tcase GymState.skip:\n\t\t\treturn <GymSkip />;\n\t\tcase GymState.rest:\n\t\t\treturn <GymRest />;\n\t\tdefault:\n\t\t\treturn null;\n\t}\n};\n\nfunction handleClick(weekDay: GymWeekDayModel, updateDays: (weekDay: GymWeekDayModel) => void) {\n\tconst state = gymServices.getNextGymState(weekDay.state);\n\tupdateDays({ ...weekDay, state})\n}\n\nconst days = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];\n\nexport const Gym: React.FC<GymProps> = (props) => {\n\treturn (\n\t\t<div className={'gym'}>\n\t\t\t<div className={'gym-cells'}>\n\t\t\t\t{\n\t\t\t\t\tprops.days.map((day, index) =>\n\t\t\t\t\t\t<Cell key={day.id} onClick={handleClick.bind(this, day, props.updateDays)}>\n\t\t\t\t\t\t\t<p>{days[index]}</p>\n\t\t\t\t\t\t\t<GymDoneMarker done={day.state} />\n\t\t\t\t\t\t</Cell>,\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t</div>\n\t\t\t<p>{props.attendance}% this month.</p>\n\t\t</div>\n\t);\n};\n","import React, { useEffect, useState } from 'react';\nimport './Quote.css';\n\nexport const Quote: React.FC = () => {\n\tconst [quote, setQuote] = useState<string>('Loading...');\n\n\tuseEffect(() => {\n\t\tif (process.env.NODE_ENV === 'production') {\n\t\t\tsetQuote('Prod');\n\t\t} else {\n\t\t\tsetQuote('I\\'m in dev so I didn\\'t fetch a quote.');\n\t\t}\n\t}, []);\n\n\treturn (\n\t\t<div className={'quote'}>\n\t\t\t<blockquote>{quote}</blockquote>\n\t\t</div>\n\t);\n};\n","import { CountdownModel } from '../models/CountdownModels';\n\nexport const countdownsMock: CountdownModel[] = [\n\t{\n\t\tcountdownId: 0,\n\t\ttitle: 'Christmas',\n\t\tdate: '2022-12-25T10:00:00.000Z',\n\t},\n\t{\n\t\tcountdownId: 1,\n\t\ttitle: 'Something',\n\t\tdate: '2022-04-19T19:00:00.000Z',\n\t},\n\t{\n\t\tcountdownId: 2,\n\t\ttitle: 'Another',\n\t\tdate: '2022-07-19T19:00:00.000Z',\n\t},\n];\n","import { CountdownModel } from '../models/CountdownModels';\nimport { ApiEndpoint, ApiMethod, ApiUrl, environment, Mode } from './constants';\nimport { countdownsMock } from '../mocks/countdownsMock';\n\nconst CountdownServices = {\n\tgetCountdowns(): Promise<CountdownModel[]> {\n\t\tif (environment === Mode.prod) {\n\t\t\treturn Promise.resolve(countdownsMock);\n\t\t}\n\t\tconst url = `${ApiUrl}${ApiEndpoint.COUNTDOWNS}`;\n\t\tconst requestInit: RequestInit = {\n\t\t\tmethod: ApiMethod.GET,\n\t\t};\n\t\treturn fetch(url, requestInit).then((res) => res.json());\n\t},\n};\n\nexport default CountdownServices;\n","import { MilestoneModel } from '../models/MilestoneModels';\n\nexport const milestonesMock: MilestoneModel[] = [\n\t{\n\t\tmilestoneId: 0,\n\t\ttitle: 'Finish dashboard',\n\t\tdue: '2021-10-05T10:55:00.000Z',\n\t},\n\t{\n\t\tmilestoneId: 1,\n\t\ttitle: 'Write API',\n\t\tdue: '2021-10-10T10:55:00.000Z',\n\t},\n\t{\n\t\tmilestoneId: 2,\n\t\ttitle: 'Persist state',\n\t\tdue: '2021-10-15T10:55:00.000Z',\n\t},\n];\n","import { milestonesMock } from '../mocks/milestonesMock';\nimport { MilestoneModel } from '../models/MilestoneModels';\nimport { ApiEndpoint, ApiMethod, ApiUrl, environment, Mode } from './constants';\n\nconst MilestoneServices = {\n\tgetMilestones(): Promise<MilestoneModel[]> {\n\t\tif (environment === Mode.prod) {\n\t\t\treturn Promise.resolve(milestonesMock);\n\t\t}\n\t\tconst url = `${ApiUrl}${ApiEndpoint.MILESTONES}`;\n\t\tconst requestInit: RequestInit = {\n\t\t\tmethod: ApiMethod.GET,\n\t\t};\n\t\treturn fetch(url, requestInit).then((res) => res.json());\n\t},\n};\n\nexport default MilestoneServices;\n","import { BoardModel } from '../models/BoardModels';\n\nexport const boardMock: BoardModel[] = [\n\t{\n\t\tboardId: 0,\n\t\ttitle: 'To Do',\n\t\tcards: [\n\t\t\t{\n\t\t\t\tcardId: 0,\n\t\t\t\ttitle: 'COSC401',\n\t\t\t\titems: ['Assignment 2'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tcardId: 1,\n\t\t\t\ttitle: 'COSC422',\n\t\t\t\titems: ['Assignment 2', 'Labs'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tcardId: 2,\n\t\t\t\ttitle: 'COSC424',\n\t\t\t\titems: [\n\t\t\t\t\t'Write up lab 6',\n\t\t\t\t\t'Write up lab 7',\n\t\t\t\t\t'Write up lab 8',\n\t\t\t\t\t'Write up lab 9',\n\t\t\t\t\t'Assignment 2',\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tcardId: 3,\n\t\t\t\ttitle: 'SENG402',\n\t\t\t\titems: [],\n\t\t\t},\n\t\t],\n\t},\n\t{\n\t\tboardId: 1,\n\t\ttitle: 'Doing',\n\t\tcards: [\n\t\t\t{\n\t\t\t\tcardId: 0,\n\t\t\t\ttitle: 'COSC401',\n\t\t\t\titems: [],\n\t\t\t},\n\t\t\t{\n\t\t\t\tcardId: 1,\n\t\t\t\ttitle: 'COSC422',\n\t\t\t\titems: [],\n\t\t\t},\n\t\t\t{\n\t\t\t\tcardId: 2,\n\t\t\t\ttitle: 'COSC424',\n\t\t\t\titems: [],\n\t\t\t},\n\t\t\t{\n\t\t\t\tcardId: 3,\n\t\t\t\ttitle: 'SENG402',\n\t\t\t\titems: ['Final Report', 'Poster'],\n\t\t\t},\n\t\t],\n\t},\n];\n","import { boardMock } from '../mocks/boardsMock';\nimport { BoardModel } from '../models/BoardModels';\nimport { ApiEndpoint, ApiMethod, ApiUrl, environment, Mode } from './constants';\n\nconst BoardServices = {\n\tgetBoards(): Promise<BoardModel[]> {\n\t\tif (environment === Mode.dev) {\n\t\t\treturn Promise.resolve(boardMock);\n\t\t}\n\t\tconst url = `${ApiUrl}${ApiEndpoint.BOARDS}`;\n\t\tconst requestInit: RequestInit = {\n\t\t\tmethod: ApiMethod.GET,\n\t\t};\n\t\treturn fetch(url, requestInit).then((res) => res.json());\n\t},\n};\n\nexport default BoardServices;\n","import React, { useMemo } from 'react';\nimport moment from 'moment';\n\nfunction getDaysUntilDate(eventDate: string) {\n\treturn moment(eventDate).diff(moment(), 'days');\n}\n\nfunction getWeeksUntilDate(eventDate: string) {\n\treturn moment(eventDate).diff(moment(), 'weeks');\n}\n\nfunction getMonthsUntilDate(eventDate: string) {\n\treturn moment(eventDate).diff(moment(), 'months');\n}\n\nconst dayEmoji = '☀️';\nconst weekEmoji = '🌕';\nconst monthEmoji = '🌎';\n\nexport const Countdown: React.FC<{ title: string; date: string }> = (props) => {\n\tconst countdownDays = useMemo(() => getDaysUntilDate(props.date), [props.date]);\n\tconst countdownWeeks = useMemo(() => getWeeksUntilDate(props.date), [props.date]);\n\tconst countdownMonths = useMemo(() => getMonthsUntilDate(props.date), [props.date]);\n\n\tconst showDays = countdownDays <= 30;\n\tconst showWeeks = countdownWeeks <= 30;\n\n\treturn (\n\t\t<div>\n\t\t\t<p>{props.title}</p>\n\t\t\t<h4>\n\t\t\t\t{\n\t\t\t\t\tshowDays ?\n\t\t\t\t\t\t`${dayEmoji.repeat(countdownDays)} ${countdownDays} days` :\n\t\t\t\t\t\t(showWeeks ?\n\t\t\t\t\t\t\t`${weekEmoji.repeat(countdownWeeks)} ${countdownWeeks} weeks` :\n\t\t\t\t\t\t\t`${monthEmoji.repeat(countdownMonths)} ${countdownMonths} months`)\n\t\t\t\t}\n\t\t\t</h4>\n\t\t</div>\n\t);\n};\n","import React from 'react';\nimport { CountdownModel } from '../../models/CountdownModels';\nimport { Countdown } from './Countdown';\n\nconst today = (new Date()).toISOString();\n\nexport const Countdowns: React.FC<{ countdowns: CountdownModel[] }> = (props) => {\n\treturn (\n\t\t<div>\n\t\t\t{props.countdowns\n\t\t\t\t.filter(a => a.date.localeCompare(today) >= 0)\n\t\t\t\t.sort((a, b) => a.date.localeCompare(b.date))\n\t\t\t\t.map((countdown) => (\n\t\t\t\t\t<Countdown key={countdown.countdownId} title={countdown.title} date={countdown.date} />\n\t\t\t\t))}\n\t\t</div>\n\t);\n};\n","import React, { useEffect, useRef, useState } from 'react';\nimport './theme.css';\nimport './App.css';\nimport { Milestone, MilestonesContainer } from './components/milestone/Milestone';\nimport { Board } from './components/board/Board';\nimport { Gym } from './components/gym/Gym';\nimport { Quote } from './components/quote/Quote';\nimport { CountdownModel } from './models/CountdownModels';\nimport { MilestoneModel } from './models/MilestoneModels';\nimport { BoardModel } from './models/BoardModels';\nimport CountdownServices from './services/CountdownServices';\nimport MilestoneServices from './services/MilestoneServices';\nimport BoardServices from './services/BoardServices';\nimport GymServices from './services/GymServices';\nimport gymServices from './services/GymServices';\nimport { Countdowns } from './components/countdown/Countdowns';\nimport { Add } from '@material-ui/icons';\nimport { GymModel, GymWeekDayModel } from './models/GymModels';\nimport { debounce } from 'lodash';\n\nfunction addBoard() {\n\talert('board?');\n}\n\nconst App: React.FC = () => {\n\tconst [milestones, setMilestones] = useState<MilestoneModel[]>([]);\n\tconst [boards, setBoards] = useState<BoardModel[]>([]);\n\tconst [gym, setGym] = useState<GymModel>({ gymWeekDays: [], gymPercent: 0 });\n\tconst [countdowns, setCountdowns] = useState<CountdownModel[]>([]);\n\tconst debouncedGymUpdate = useRef(\n\t\tdebounce(async (gymModel: GymWeekDayModel[]) => {\n\t\t\tsetGym(await gymServices.updateGymWeekDays(gymModel));\n\t\t}, 1000),\n\t).current;\n\n\tfunction updateGymDay(weekDay: GymWeekDayModel) {\n\t\tconst updatedWeekDays = gym.gymWeekDays.map((day) => {\n\t\t\tif (day.id === weekDay.id) return weekDay;\n\t\t\treturn day;\n\t\t});\n\t\t// Optimistically update state\n\t\tsetGym({\n\t\t\t...gym,\n\t\t\tgymWeekDays: updatedWeekDays,\n\t\t});\n\t\t// Update API\n\t\tdebouncedGymUpdate(updatedWeekDays);\n\t}\n\n\t// Cancel inflight requests on unmount\n\tuseEffect(() =>\n\t\t() => {\n\t\t\tdebouncedGymUpdate.cancel();\n\t\t}, [debouncedGymUpdate]);\n\n\tuseEffect(() => {\n\t\tMilestoneServices.getMilestones().then((res) => {\n\t\t\tsetMilestones(res);\n\t\t});\n\n\t\tBoardServices.getBoards().then((res) => {\n\t\t\tsetBoards(res);\n\t\t});\n\n\t\tGymServices.getGymWeekDays().then((res) => {\n\t\t\tsetGym(res);\n\t\t});\n\n\t\tCountdownServices.getCountdowns().then((res) => {\n\t\t\tsetCountdowns(res);\n\t\t});\n\t}, []);\n\n\treturn (\n\t\t<div className='App' data-theme='dark'>\n\t\t\t<div className='boards'>\n\t\t\t\t{boards.map((board) => {\n\t\t\t\t\tif (board.cards.length > 0)\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<Board\n\t\t\t\t\t\t\t\tkey={board.boardId}\n\t\t\t\t\t\t\t\ttitle={board.title}\n\t\t\t\t\t\t\t\tcards={board.cards}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t);\n\t\t\t\t\treturn null;\n\t\t\t\t})}\n\t\t\t\t<button className='boards-add' onClick={addBoard}><Add /></button>\n\t\t\t</div>\n\t\t\t<hr />\n\t\t\t<div>\n\t\t\t\t<h2>Milestones</h2>\n\t\t\t\t<MilestonesContainer>\n\t\t\t\t\t{milestones\n\t\t\t\t\t\t.sort((a, b) => a.due.localeCompare(b.due))\n\t\t\t\t\t\t.map((milestone) => (\n\t\t\t\t\t\t\t<Milestone key={milestone.milestoneId} milestone={milestone} />\n\t\t\t\t\t\t))}\n\t\t\t\t</MilestonesContainer>\n\t\t\t</div>\n\t\t\t<hr />\n\t\t\t<div>\n\t\t\t\t<h2>Gym</h2>\n\t\t\t\t<Gym days={gym.gymWeekDays} attendance={gym.gymPercent}\n\t\t\t\t\t\t updateDays={(days) => updateGymDay(days)} />\n\t\t\t</div>\n\t\t\t<hr />\n\t\t\t<Countdowns countdowns={countdowns} />\n\t\t\t<hr />\n\t\t\t<Quote />\n\t\t</div>\n\t);\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n\twindow.location.hostname === 'localhost' ||\n\t// [::1] is the IPv6 localhost address.\n\twindow.location.hostname === '[::1]' ||\n\t// 127.0.0.1/8 is considered localhost for IPv4.\n\twindow.location.hostname.match(\n\t\t/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n\t),\n);\n\ntype Config = {\n\tonSuccess?: (registration: ServiceWorkerRegistration) => void;\n\tonUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n\tif (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n\t\t// The URL constructor is available in all browsers that support SW.\n\t\tconst publicUrl = new URL(\n\t\t\t(process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n\t\t\twindow.location.href,\n\t\t);\n\t\tif (publicUrl.origin !== window.location.origin) {\n\t\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\n\t\t\t// from what our page is served on. This might happen if a CDN is used to\n\t\t\t// serve assets; see https://github.com/facebook/create-react-app/issues/2374\n\t\t\treturn;\n\t\t}\n\n\t\twindow.addEventListener('load', () => {\n\t\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n\t\t\tif (isLocalhost) {\n\t\t\t\t// This is running on localhost. Let's check if a service worker still exists or not.\n\t\t\t\tcheckValidServiceWorker(swUrl, config);\n\n\t\t\t\t// Add some additional logging to localhost, pointing developers to the\n\t\t\t\t// service worker/PWA documentation.\n\t\t\t\tnavigator.serviceWorker.ready.then(() => {\n\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t'This web app is being served cache-first by a service ' +\n\t\t\t\t\t\t'worker. To learn more, visit https://bit.ly/CRA-PWA',\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Is not localhost. Just register service worker\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t});\n\t}\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n\tnavigator.serviceWorker\n\t\t.register(swUrl)\n\t\t.then((registration) => {\n\t\t\tregistration.onupdatefound = () => {\n\t\t\t\tconst installingWorker = registration.installing;\n\t\t\t\tif (installingWorker == null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tinstallingWorker.onstatechange = () => {\n\t\t\t\t\tif (installingWorker.state === 'installed') {\n\t\t\t\t\t\tif (navigator.serviceWorker.controller) {\n\t\t\t\t\t\t\t// At this point, the updated precached content has been fetched,\n\t\t\t\t\t\t\t// but the previous service worker will still serve the older\n\t\t\t\t\t\t\t// content until all client tabs are closed.\n\t\t\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\t\t'New content is available and will be used when all ' +\n\t\t\t\t\t\t\t\t'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onUpdate) {\n\t\t\t\t\t\t\t\tconfig.onUpdate(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// At this point, everything has been precached.\n\t\t\t\t\t\t\t// It's the perfect time to display a\n\t\t\t\t\t\t\t// \"Content is cached for offline use.\" message.\n\t\t\t\t\t\t\tconsole.log('Content is cached for offline use.');\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onSuccess) {\n\t\t\t\t\t\t\t\tconfig.onSuccess(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\t\t})\n\t\t.catch((error) => {\n\t\t\tconsole.error('Error during service worker registration:', error);\n\t\t});\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n\t// Check if the service worker can be found. If it can't reload the page.\n\tfetch(swUrl)\n\t\t.then((response) => {\n\t\t\t// Ensure service worker exists, and that we really are getting a JS file.\n\t\t\tconst contentType = response.headers.get('content-type');\n\t\t\tif (\n\t\t\t\tresponse.status === 404 ||\n\t\t\t\t(contentType != null && contentType.indexOf('javascript') === -1)\n\t\t\t) {\n\t\t\t\t// No service worker found. Probably a different app. Reload the page.\n\t\t\t\tnavigator.serviceWorker.ready.then((registration) => {\n\t\t\t\t\tregistration.unregister().then(() => {\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Service worker found. Proceed as normal.\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t})\n\t\t.catch(() => {\n\t\t\tconsole.log(\n\t\t\t\t'No internet connection found. App is running in offline mode.',\n\t\t\t);\n\t\t});\n}\n\nexport function unregister() {\n\tif ('serviceWorker' in navigator) {\n\t\tnavigator.serviceWorker.ready.then((registration) => {\n\t\t\tregistration.unregister();\n\t\t});\n\t}\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}