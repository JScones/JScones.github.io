{"version":3,"sources":["services/constants.ts","components/Card/Card.tsx","components/Board/Todo.tsx","components/Board/TodoCard.tsx","components/Board/Board.tsx","components/Assignment/Assignments.tsx","components/Gym/Gym.tsx","components/Quote/Quote.tsx","services/AssignmentServices.ts","services/BoardServices.ts","services/GymServices.ts","App.tsx","mocks/gymMock.ts","serviceWorker.ts","index.tsx"],"names":["ApiEndpoint","ApiMethod","Card","props","className","title","children","CardContainer","Todo","TodoCard","items","length","map","item","key","slice","push","Board","cards","card","cardId","AssignmentsContainer","AssignmentCard","assignment","date","due","fromNow","Cell","GymCheck","GymCross","GymDoneMarker","done","Gym","days","attendance","Quote","useState","quote","setQuote","useEffect","console","log","process","ApiUrl","AssignmentServices","getAssignments","url","ASSIGNMENTS","requestInit","method","GET","fetch","then","res","json","BoardServices","getBoards","BOARDS","GymServices","getGymWeekDays","GYM","App","assignments","setAssignments","boards","setBoards","gymWeekDays","setGymWeekDays","assignmentsRes","boardsRes","gymWeekDaysRes","board","boardId","sort","a","b","localeCompare","assignmentId","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.581c6802.chunk.js","sourcesContent":["const port = '5000';\nconst server = 'dashboard-8d69a/us-central1';\n\nexport const ApiUrl = process.env.NODE_ENV === \"production\" ? 'https://us-central1-dashboard-8d69a.cloudfunctions.net' : `http://localhost:${port}/${server}`;\n\nexport enum ApiEndpoint {\n    ASSIGNMENTS = '/assignments',\n    BOARDS = '/boards',\n    GYM = '/gym'\n}\n\nexport enum ApiMethod {\n    GET = 'GET',\n    POST = 'POST',\n    PUT = 'PUT',\n    PATCH = 'PATCH',\n    DELETE = 'DELETE',\n}\n","import React from \"react\";\n\nimport './Card.css';\n\ninterface CardProps {\n    title: string\n}\n\nexport const Card: React.FC<CardProps> = (props) => {\n\n\n    return (\n        <div className={\"card\"}>\n            <h3>{props.title}</h3>\n            {props.children}\n        </div>\n    )\n};\n\nexport const CardContainer = (props: any) => (\n    <div className={\"card-container\"} {...props}>\n    </div>\n);\n","import React from 'react';\n\nimport './Todo.css';\n\nexport const Todo: React.FC = (props) => {\n    return (\n        <div className={\"todo\"}>\n            {props.children}\n        </div>\n    )\n};\n","import React, {ReactNode} from 'react';\nimport {Card} from \"../Card/Card\";\nimport {Todo} from \"./Todo\";\n\ninterface TodoCardProps {\n    title: string,\n    items: string[]\n}\n\nexport const TodoCard: React.FC<TodoCardProps> = (props) => {\n\n    let items:ReactNode[] = [];\n    const getItems = () => {\n        if (props.items.length < 5) items = props.items.map(item => <Todo key={item}>{item}</Todo>);\n        else if (props.items.length >=5 ) {\n            items = props.items.slice(0, 3).map(item => <Todo key={item}>{item}</Todo>);\n            items.push(<Todo key={\"last one\"}>{ `+ ${props.items.length - 3} more items...`}</Todo>)\n        }\n        return items;\n    };\n\n    return (\n        <Card title={props.title}>\n            { getItems() }\n        </Card>\n    )\n};\n","import React from 'react';\nimport {CardContainer} from \"../Card/Card\";\nimport {CardModel} from \"../../models/BoardModels\";\nimport {TodoCard} from \"./TodoCard\";\n\ninterface BoardProps {\n    title: string,\n    cards: CardModel[]\n}\n\nexport const Board: React.FC<BoardProps> = (props) => {\n    return (\n        <>\n            <h2>{props.title}</h2>\n            <CardContainer>\n                { props.cards.map(card => {\n                    if (card.items && card.items.length > 0) return <TodoCard key={card.cardId} title={card.title} items={card.items}/>\n                })}\n            </CardContainer>\n        </>\n    )\n};\n","import React from \"react\";\nimport './Assignments.css';\nimport {AssingmentModel} from \"../../models/AssingmentModels\";\nimport Moment from \"react-moment\";\n\nexport const AssignmentsContainer: React.FC = (props) => {\n    return (\n        <div className={\"assignments-container\"}>\n            { props.children }\n        </div>\n    )\n};\n\ninterface AssignmentCardProps {\n    assignment: AssingmentModel\n}\n\nexport const AssignmentCard:  React.FC<AssignmentCardProps> = (props) => {\n    return (\n        <div className={\"assignment\"}>\n            <p>{props.assignment.title}</p>\n            <h4><Moment date={props.assignment.due} fromNow/></h4>\n        </div>\n    )\n};","import React from \"react\";\nimport Check from \"@material-ui/icons/Check\";\nimport Clear from \"@material-ui/icons/Clear\";\n\n\nimport './Gym.css';\nimport {MonthGymMock} from \"../../mocks/gymMock\";\n\ninterface GymProps {\n    days: number[],\n    attendance: number\n}\n\nconst Cell: React.FC = (props) => {\n    return (\n        <div className={\"gym-cell\"}>\n            { props.children }\n        </div>\n    )\n};\n\nconst GymCheck = () => {\n    return (\n        <p className={\"gym-tick\"}>\n            <Check/>\n        </p>\n    )\n};\n\nconst GymCross = () => {\n    return (\n        <p className={\"gym-cross\"}>\n            <Clear/>\n        </p>\n    )\n};\n\nconst GymDoneMarker: React.FC<{done: number}> = (props) => {\n    if (props.done === 0) return <GymCross/>;\n    if (props.done === 1) return <GymCheck/>;\n    else return null;\n};\n\nexport const Gym: React.FC<GymProps> = (props) => {\n\n    return (\n        <div className={\"gym\"}>\n            <div className={\"gym-cells\"}>\n                <Cell>\n                    <p>Mon</p>\n                    <GymDoneMarker done={props.days[0]}/>\n                </Cell>\n                <Cell>\n                    <p>Tue</p>\n                    <GymDoneMarker done={props.days[1]}/>\n                </Cell>\n                <Cell>\n                    <p>Wed</p>\n                    <GymDoneMarker done={props.days[2]}/>\n                </Cell>\n                <Cell>\n                    <p>Thu</p>\n                    <GymDoneMarker done={props.days[3]}/>\n                </Cell>\n                <Cell>\n                    <p>Fri</p>\n                    <GymDoneMarker done={props.days[4]}/>\n                </Cell>\n                <Cell>\n                    <p>Sat</p>\n                    <GymDoneMarker done={props.days[5]}/>\n                </Cell>\n                <Cell>\n                    <p>Sun</p>\n                    <GymDoneMarker done={props.days[6]}/>\n                </Cell>\n            </div>\n            <p>{props.attendance}% this month.</p>\n        </div>\n    )\n};","import React, {useEffect, useState} from \"react\";\nimport './Quote.css';\n\nexport const Quote: React.FC = () => {\n    const [quote, setQuote] = useState<string>(\"Loading...\");\n\n    useEffect(() => {\n        console.log(process.env.NODE_ENV);\n        if (process.env.NODE_ENV === \"production\") {\n            setQuote(\"Prod\");\n        } else {\n            console.log(\"in here\");\n            setQuote(\"I'm in dev so I didn't fetch a quote.\");\n        }\n    }, []);\n\n    return (\n        <div className={\"quote\"}>\n            <blockquote>{ quote }</blockquote>\n        </div>\n    )\n};","import {ApiEndpoint, ApiMethod, ApiUrl} from \"./constants\";\nimport {AssingmentModel} from \"../models/AssingmentModels\";\n\nconst AssignmentServices = {\n    getAssignments(): Promise<AssingmentModel[]> {\n        const url = `${ApiUrl}${ApiEndpoint.ASSIGNMENTS}`;\n        const requestInit: RequestInit = {\n            method: ApiMethod.GET,\n        };\n        return fetch(url, requestInit).then(res => res.json());\n    }\n\n};\n\nexport default AssignmentServices","import {ApiEndpoint, ApiMethod, ApiUrl} from \"./constants\";\nimport {BoardModel} from \"../models/BoardModels\";\n\nconst BoardServices = {\n    getBoards(): Promise<BoardModel[]> {\n        const url = `${ApiUrl}${ApiEndpoint.BOARDS}`;\n        const requestInit: RequestInit = {\n            method: ApiMethod.GET,\n        };\n        return fetch(url, requestInit).then(res => res.json());\n    }\n\n};\n\nexport default BoardServices","import {ApiEndpoint, ApiMethod, ApiUrl} from \"./constants\";\nimport {BoardModel} from \"../models/BoardModels\";\nimport {GymWeekDaysModel} from \"../models/GymModels\";\n\nconst GymServices = {\n    getGymWeekDays(): Promise<GymWeekDaysModel> {\n        const url = `${ApiUrl}${ApiEndpoint.GYM}`;\n        const requestInit: RequestInit = {\n            method: ApiMethod.GET,\n        };\n        return fetch(url, requestInit).then(res => res.json());\n    }\n\n};\n\nexport default GymServices","import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport {Board} from \"./components/Board/Board\";\nimport {boardMock} from './mocks/boardsMock';\nimport {assignmentsMock} from \"./mocks/assignmentsMock\";\nimport {AssignmentCard, AssignmentsContainer} from \"./components/Assignment/Assignments\";\nimport {Gym} from \"./components/Gym/Gym\";\nimport {GymMock, MonthGymMock} from \"./mocks/gymMock\";\nimport {Quote} from \"./components/Quote/Quote\";\nimport {AssingmentModel} from \"./models/AssingmentModels\";\nimport AssignmentServices from \"./services/AssignmentServices\";\nimport {BoardModel} from \"./models/BoardModels\";\nimport BoardServices from \"./services/BoardServices\";\nimport {GymWeekDaysModel} from \"./models/GymModels\";\nimport GymServices from \"./services/GymServices\";\n\nconst App: React.FC = () => {\n\n    const [assignments, setAssignments] = useState<AssingmentModel[]>([]);\n    const [boards, setBoards] = useState<BoardModel[]>([]);\n    const [gymWeekDays, setGymWeekDays] = useState<GymWeekDaysModel>([]);\n\n    useEffect(() => {\n        AssignmentServices.getAssignments().then(assignmentsRes => {\n            console.log(assignmentsRes);\n            setAssignments(assignmentsRes);\n        });\n\n        BoardServices.getBoards().then(boardsRes => {\n            console.log(boardsRes);\n            setBoards(boardsRes);\n        });\n\n        GymServices.getGymWeekDays().then(gymWeekDaysRes => {\n            console.log(gymWeekDaysRes);\n            setGymWeekDays(gymWeekDaysRes);\n        })\n    }, []);\n\n    return (\n        <div className=\"App\">\n            {boards.map(board => {\n                if (board.cards.length > 0) return <Board key={board.boardId} title={board.title} cards={board.cards}/>\n            })}\n            <hr/>\n            <div>\n                <h2>Assignments</h2>\n                <AssignmentsContainer>\n                    {assignments.sort((a, b) => a.due.localeCompare(b.due)).map(assignment => <AssignmentCard\n                        key={assignment.assignmentId} assignment={assignment}/>)}\n                </AssignmentsContainer>\n            </div>\n            <hr/>\n            <div>\n                <h2>Gym</h2>\n                <Gym days={gymWeekDays} attendance={MonthGymMock}/>\n            </div>\n            <hr/>\n            {/*<div>*/}\n            {/*    <h2>Weather</h2>*/}\n            {/*</div>*/}\n            {/*<hr/>*/}\n            <Quote/>\n        </div>\n    );\n\n};\n\nexport default App;\n","\n\nexport const GymMock: number[] = [1,0,-1,-1,-1,-1,-1];\n\nexport const MonthGymMock: number = 50;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}